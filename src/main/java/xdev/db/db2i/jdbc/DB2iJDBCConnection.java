/*
 * SqlEngine Database Adapter DB2i - XAPI SqlEngine Database Adapter for DB2i
 * Copyright Â© 2003 XDEV Software (https://xdev.software)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package xdev.db.db2i.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;

import xdev.db.DBException;
import xdev.db.jdbc.JDBCConnection;
public class DB2iJDBCConnection extends JDBCConnection<DB2iJDBCDataSource, DB2iDbms>
{
	public DB2iJDBCConnection(final DB2iJDBCDataSource dataSource)
	{
		super(dataSource);
	}
	
	
	@Override
	protected Connection establishConnection() throws DBException
	{
		final Connection con = super.establishConnection();
		
		try
		{
			final String schema = this.dataSource.getSchema();
			if(schema != null && schema.length() > 0 && !schema.equals(this.dataSource.getUserName()))
			{
				con.createStatement().execute("SET SCHEMA " + schema); //$NON-NLS-1$
			}
		}
		catch(final SQLException e)
		{
			throw new DBException(this.dataSource, e);
		}
		
		return con;
	}
	
	@Override
	public int getQueryRowCount(final String select) throws DBException
	{
		final StringBuilder sb = new StringBuilder();
		sb.append("SELECT COUNT(*) FROM ("); //$NON-NLS-1$
		sb.append(select);
		sb.append(")"); //$NON-NLS-1$
		
		try
		{
			final ResultSet result = this.queryJDBC(sb.toString());
			try
			{
				result.next();
				final int rowCount = result.getInt(1);
				return rowCount;
			}
			finally
			{
				result.close();
			}
		}
		catch(final DBException e)
		{
			throw e;
		}
		catch(final Exception e)
		{
			throw new DBException(this.dataSource, e);
		}
	}
	
	@Override
	public void createTable(
		final String tableName, final String primaryKey, final Map<String, String> columnMap,
		final boolean isAutoIncrement, final Map<String, String> foreignKeys) throws Exception
	{
		final Connection connection = super.getConnection();
		final Statement statement = connection.createStatement();
		try
		{
			if(!this.checkIfTableExists(connection.createStatement(), tableName))
			{
				if(!columnMap.containsKey(primaryKey))
				{
					columnMap.put(primaryKey, "INTEGER"); //$NON-NLS-1$
				}
				StringBuffer createStatement = null;
				
				if(isAutoIncrement)
				{
					createStatement = new StringBuffer(
							"CREATE TABLE IF NOT EXISTS " + tableName + "(" //$NON-NLS-1$ //$NON-NLS-2$
									+ primaryKey
									+ " " + columnMap.get(primaryKey) + " GENERATED BY Default AS IDENTITY(Start with 201, Increment by 1) PRIMARY KEY,"); //$NON-NLS-1$ //$NON-NLS-2$
				}
				else
				{
					createStatement = new StringBuffer(
							"CREATE TABLE IF NOT EXISTS " + tableName + "(" //$NON-NLS-1$ //$NON-NLS-2$
									+ primaryKey + " " + columnMap.get(primaryKey) + ","); //$NON-NLS-1$ //$NON-NLS-2$
				}
				
				int i = 0;
				for(final String keySet : columnMap.keySet())
				{
					if(!keySet.equals(primaryKey))
					{
						if(i <= columnMap.size())
						{
							createStatement.append(
								keySet + " " + columnMap.get(keySet) + ","); //$NON-NLS-1$ //$NON-NLS-2$
						}
						else
						{
							createStatement.append(keySet + " " + columnMap.get(keySet) + ")"); //$NON-NLS-1$ //$NON-NLS-2$
							
						}
						
						i++;
					}
				}
				
				if(log.isDebugEnabled())
				{
					log.debug("SQL Statement to create a table: " + createStatement.toString()); //$NON-NLS-1$
				}
				
				statement.execute(createStatement.toString());
			}
		}
		catch(final Exception e)
		{
			throw e;
		}
		finally
		{
			statement.close();
			connection.close();
		}
	}
	
	private boolean checkIfTableExists(final Statement statement, final String tableName) throws Exception
	{
		
		final String sql =
			"SELECT NAME FROM SYSIBM.SYSTABLES WHERE NAME='" + tableName + "'"; //$NON-NLS-1$ //$NON-NLS-2$
		
		ResultSet resultSet = null;
		try
		{
			statement.execute(sql);
			resultSet = statement.getResultSet();
		}
		catch(final Exception e)
		{
			if(resultSet != null)
			{
				resultSet.close();
			}
			statement.close();
			throw e;
		}
		
		if(resultSet != null)
		{
			if(resultSet.next())
			{
				resultSet.close();
				statement.close();
				return true;
			}
			resultSet.close();
			
		}
		statement.close();
		return false;
	}
	
}
